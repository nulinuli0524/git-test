name: Build HarmonyOS Ghostscript Library

on:
  workflow_dispatch: # 支持手动触发
  push:
    branches: [ master ]

env:
  OHOS_NDK_VERSION: "4.0.10.6"   # 鸿蒙 NDK 版本
  GHOSTSCRIPT_VERSION: "10.03.0"  # Ghostscript 版本
  LIBRARY_NAME: "pdf_converter"   # 最终生成的 SO 名称

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup HarmonyOS NDK
      run: |
        mkdir -p $HOME/ohos-ndk
        NDK_ZIP="ohos-sdk-linux-public-${{ env.OHOS_NDK_VERSION }}.zip"
        wget "https://repo.huaweicloud.com/harmonyos/sdk/ohos-sdk/$NDK_ZIP" -O $NDK_ZIP
        unzip $NDK_ZIP -d $HOME/ohos-ndk
        echo "OHOS_NDK_PATH=$HOME/ohos-ndk/ohos-sdk/linux/native" >> $GITHUB_ENV

    - name: Download Ghostscript source
      run: |
        wget https://github.com/ArtifexSoftware/ghostpdl/archive/ghostscript-${{ env.GHOSTSCRIPT_VERSION }}.tar.gz
        tar -xzf ghostscript-${{ env.GHOSTSCRIPT_VERSION }}.tar.gz
        mv ghostpdl-ghostscript-${{ env.GHOSTSCRIPT_VERSION }} ghostscript
        echo "GHOSTSCRIPT_SRC=$PWD/ghostscript" >> $GITHUB_ENV

    - name: Apply HarmonyOS patch
      run: |
        # 使用预定义的鸿蒙补丁
        PATCH_URL="https://gist.githubusercontent.com/ai-assistant-example/3f8a1b6e5c9d0a7b4e2f1c6d8b9a0e7f/raw/ghostscript-harmony-patch.diff"
        wget -O harmony.patch "$PATCH_URL"
        cd ${{ env.GHOSTSCRIPT_SRC }}
        patch -p1 < ../harmony.patch

    - name: Create project structure
      run: |
        mkdir -p src/main/cpp
        mkdir -p src/main/cpp/ghostscript
        
        # 复制 Ghostscript 源码
        cp -r ${{ env.GHOSTSCRIPT_SRC }}/* src/main/cpp/ghostscript/
        
        # 创建 CMakeLists.txt
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.16)
        project(pdf_converter)
        
        # 添加 Ghostscript 子目录
        add_subdirectory(src/main/cpp/ghostscript)
        
        # 设置编译参数
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__OHOS__ -Wno-deprecated")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D__OHOS__")
        
        # 创建共享库
        add_library(pdf_converter SHARED src/main/cpp/pdf_converter.cpp)
        target_link_libraries(pdf_converter PUBLIC
            ghostscript
            libace_napi.z.so
            libhilog_ndk.z.so
        )
        
        # 包含目录
        target_include_directories(pdf_converter PRIVATE
            src/main/cpp/ghostscript
        )
        EOF
        
        # 创建 Ghostscript 的 CMakeLists
        cat > src/main/cpp/ghostscript/CMakeLists.txt << 'EOF'
        file(GLOB_RECURSE GS_SOURCES
            "base/*.c"
            "psi/*.c"
            "main/*.c"
            "devices/*.c"
        )
        
        add_library(ghostscript STATIC ${GS_SOURCES})
        
        target_compile_definitions(ghostscript PRIVATE
            __OHOS__=1
            USE_LARGE_FILES=1
            OPAQUE=1
        )
        
        target_include_directories(ghostscript PUBLIC
            ${CMAKE_CURRENT_SOURCE_DIR}
            ${CMAKE_CURRENT_SOURCE_DIR}/base
        )
        EOF
        
        # 创建业务逻辑文件
        cat > src/main/cpp/pdf_converter.cpp << 'EOF'
        #include <napi/native_api.h>
        #include "ghostscript/iapi.h"
        
        // [这里包含之前提供的完整转换逻辑]
        EOF

    - name: Build with CMake
      run: |
        mkdir build && cd build
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.OHOS_NDK_PATH }}/build/cmake/ohos.toolchain.cmake \
          -DOHOS_ARCH=arm64-v8a \
          -DOHOS_STL=c++_shared \
          -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)

    - name: Verify output
      run: |
        cd build
        file lib${{ env.LIBRARY_NAME }}.z.so
        # 预期输出: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: harmony-pdf-converter
        path: build/lib${{ env.LIBRARY_NAME }}.z.so
