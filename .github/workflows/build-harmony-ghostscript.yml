name: Build HarmonyOS Ghostscript Library

on:
  workflow_dispatch:
  push:
    branches: [ master ]

env:
  OHOS_NDK_VERSION: "4.0.10.6"
  GHOSTSCRIPT_VERSION: "10.03.0"
  LIBRARY_NAME: "pdf_converter"
  PROJECT_ROOT: "native-build"  # 新增：专用构建目录

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup directories
      run: |
        # 创建专用构建目录
        mkdir -p ${{ env.PROJECT_ROOT }}
        echo "PROJECT_PATH=$GITHUB_WORKSPACE/${{ env.PROJECT_ROOT }}" >> $GITHUB_ENV

    # ... [其他步骤保持不变，但所有路径都使用 ${{ env.PROJECT_PATH }}] ...

    - name: Create project structure
      run: |
        cd ${{ env.PROJECT_PATH }}
        mkdir -p src/main/cpp
        mkdir -p src/main/cpp/ghostscript
        
        # 复制 Ghostscript 源码
        cp -r ${{ env.GHOSTSCRIPT_SRC }}/* src/main/cpp/ghostscript/
        
        # 在项目根目录创建 CMakeLists.txt
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.16)
        project(pdf_converter)
        
        # 添加 Ghostscript 子目录
        add_subdirectory(src/main/cpp/ghostscript)
        
        # 设置编译参数
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__OHOS__ -Wno-deprecated")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D__OHOS__")
        
        # 创建共享库
        add_library(pdf_converter SHARED src/main/cpp/pdf_converter.cpp)
        target_link_libraries(pdf_converter PUBLIC
            ghostscript
            libace_napi.z.so
            libhilog_ndk.z.so
        )
        
        # 包含目录
        target_include_directories(pdf_converter PRIVATE
            src/main/cpp/ghostscript
        )
        EOF
        
        # 创建 Ghostscript 的 CMakeLists
        cat > src/main/cpp/ghostscript/CMakeLists.txt << 'EOF'
        file(GLOB_RECURSE GS_SOURCES
            "base/*.c"
            "psi/*.c"
            "main/*.c"
            "devices/*.c"
        )
        
        add_library(ghostscript STATIC ${GS_SOURCES})
        
        target_compile_definitions(ghostscript PRIVATE
            __OHOS__=1
            USE_LARGE_FILES=1
            OPAQUE=1
        )
        
        target_include_directories(ghostscript PUBLIC
            ${CMAKE_CURRENT_SOURCE_DIR}
            ${CMAKE_CURRENT_SOURCE_DIR}/base
        )
        EOF
        
        # 创建业务逻辑文件
        cat > src/main/cpp/pdf_converter.cpp << 'EOF'
        #include <napi/native_api.h>
        #include "ghostscript/iapi.h"
        
        // [这里包含完整的转换逻辑]
        EOF

    - name: Build with CMake
      run: |
        cd ${{ env.PROJECT_PATH }}
        mkdir build && cd build
        
        # 使用正确的路径调用 CMake
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.OHOS_NDK_PATH }}/build/cmake/ohos.toolchain.cmake \
          -DOHOS_ARCH=arm64-v8a \
          -DOHOS_STL=c++_shared \
          -DCMAKE_BUILD_TYPE=Release
        
        make -j$(nproc)
        
        # 重命名SO文件
        mv lib${{ env.LIBRARY_NAME }}.so lib${{ env.LIBRARY_NAME }}.z.so

    # ... [后续步骤保持不变] ...
