name: Build HarmonyOS Ghostscript Library

on:
  workflow_dispatch:
    inputs:
      ghostscript_version:
        description: 'Ghostscript Version'
        required: false
        default: '10.03.0'
      ndk_version:
        description: 'HarmonyOS NDK Version'
        required: false
        default: '3.2.11.8'  # 使用已验证的稳定版本
  push:
    branches: [ master ]

env:
  OHOS_NDK_VERSION: ${{ github.event.inputs.ndk_version || '3.2.11.8' }}
  GHOSTSCRIPT_VERSION: ${{ github.event.inputs.ghostscript_version || '10.03.0' }}
  LIBRARY_NAME: "pdf_converter"
  PROJECT_ROOT: "native-build"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository (shallow)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Free disk space
      run: |
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        if command -v npm &> /dev/null; then npm cache clean --force; fi
        if command -v pip &> /dev/null; then pip cache purge; fi
        sudo rm -rf /tmp/* /var/tmp/*
        df -h

    - name: Setup directories
      run: |
        mkdir -p ${{ env.PROJECT_ROOT }}
        echo "PROJECT_PATH=$GITHUB_WORKSPACE/${{ env.PROJECT_ROOT }}" >> $GITHUB_ENV

    - name: Setup HarmonyOS NDK
      run: |
        mkdir -p ohos-ndk
        VERSION="${{ env.OHOS_NDK_VERSION }}"
        
        # 多源下载策略 - 按优先级尝试不同来源
        DOWNLOAD_SOURCES=(
          # 官方每日构建源
          "http://ci.openharmony.cn/dailys/dailybuilds/ohos-sdk/ohos-sdk-linux-$VERSION.zip"
          
          # 华为云镜像源（新格式）
          "https://mirrors.huaweicloud.com/harmonyos/sdk/ohos-sdk/$VERSION/ohos-sdk-linux-public-$VERSION.zip"
          
          # 华为云镜像源（旧格式）
          "https://mirrors.huaweicloud.com/harmonyos/sdk/ohos-sdk/ohos-sdk-linux-$VERSION.zip"
          
          # 官方CDN源（带IP直连）
          "http://115.223.9.103/ohos-sdk/ohos-sdk-linux-$VERSION.zip"
        )
        
        # 带重试的下载
        DOWNLOAD_SUCCESS=0
        for url in "${DOWNLOAD_SOURCES[@]}"; do
          echo "Trying source: $url"
          if wget -q --spider "$url"; then
            echo "URL accessible, downloading..."
            if wget "$url" -O ndk.zip; then
              DOWNLOAD_SUCCESS=1
              echo "✅ Downloaded from $url"
              break
            fi
          fi
          sleep 3
        done
        
        # 最终回退到稳定版本
        if [ $DOWNLOAD_SUCCESS -ne 1 ]; then
          STABLE_VERSION="3.2.11.8"
          STABLE_URL="https://repo.huaweicloud.com/harmonyos/sdk/ohos-sdk/$STABLE_VERSION/ohos-sdk-linux-$STABLE_VERSION.zip"
          echo "⚠️ Using fallback stable version: $STABLE_VERSION"
          wget "$STABLE_URL" -O ndk.zip || {
            echo "❌ Critical failure: Unable to download NDK"
            exit 1
          }
        fi
        
        # 解压并设置路径
        unzip -q ndk.zip -d ohos-ndk
        
        # 动态查找native目录
        NATIVE_PATH=$(find ohos-ndk -type d -name "native" | head -n1)
        if [ -z "$NATIVE_PATH" ]; then
          # 尝试备用目录结构
          NATIVE_PATH=$(find ohos-ndk -type d -path "*/build-tools/cmake" | head -n1 | xargs dirname)
        fi
        
        if [ -n "$NATIVE_PATH" ]; then
          echo "OHOS_NDK_PATH=$GITHUB_WORKSPACE/$NATIVE_PATH" >> $GITHUB_ENV
          echo "NDK location: $NATIVE_PATH"
        else
          echo "❌ NDK structure verification failed"
          echo "Directory content:"
          find ohos-ndk -maxdepth 3 -type d
          exit 1
        fi
        
        rm -f ndk.zip

    # 后续步骤保持不变（Ghostscript下载、构建等）
    - name: Download Ghostscript source
      run: |
        VERSION="${{ env.GHOSTSCRIPT_VERSION }}"
        GHOSTSCRIPT_URL="https://github.com/ArtifexSoftware/ghostpdl/archive/refs/tags/ghostscript-$VERSION.tar.gz"
        
        # 带重试的下载
        for i in {1..3}; do
          if wget "$GHOSTSCRIPT_URL" -O ghostscript.tar.gz; then
            echo "Downloaded Ghostscript successfully"
            break
          else
            echo "Download attempt $i failed"
            sleep 10
          fi
        done
        
        # 文件验证和提取
        if [ ! -f "ghostscript.tar.gz" ]; then
          echo "❌ Failed to download Ghostscript"
          exit 1
        fi
        
        mkdir -p ${{ env.PROJECT_PATH }}/src/main/cpp/ghostscript
        tar -xzf ghostscript.tar.gz \
          --strip-components=3 \
          --directory=${{ env.PROJECT_PATH }}/src/main/cpp/ghostscript \
          ghostpdl-ghostscript-$VERSION/ghostscript/{base,psi,main,devices}
        
        if [ ! -f "${{ env.PROJECT_PATH }}/src/main/cpp/ghostscript/devices/gdevpclm.c" ]; then
          echo "❌ File extraction failed"
          exit 1
        fi
        
        rm -f ghostscript.tar.gz

    # ... [保持原有的CMake配置和构建步骤] ...
