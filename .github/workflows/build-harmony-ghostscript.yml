name: Build HarmonyOS Ghostscript Library

on:
  workflow_dispatch:
    inputs:
      ghostscript_version:
        description: 'Ghostscript Version'
        required: false
        default: '10.03.0'
      ndk_version:
        description: 'HarmonyOS NDK Version'
        required: false
        default: '4.0.12.5'
  push:
    branches: [ master ]

env:
  OHOS_NDK_VERSION: ${{ github.event.inputs.ndk_version || '4.0.12.5' }}
  GHOSTSCRIPT_VERSION: ${{ github.event.inputs.ghostscript_version || '10.03.0' }}
  LIBRARY_NAME: "pdf_converter"
  PROJECT_ROOT: "native-build"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository (shallow)
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Free disk space
      run: |
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        if command -v npm &> /dev/null; then npm cache clean --force; fi
        if command -v pip &> /dev/null; then pip cache purge; fi
        sudo rm -rf /tmp/* /var/tmp/*
        df -h

    - name: Setup directories
      run: |
        mkdir -p ${{ env.PROJECT_ROOT }}
        echo "PROJECT_PATH=$GITHUB_WORKSPACE/${{ env.PROJECT_ROOT }}" >> $GITHUB_ENV

    - name: Setup HarmonyOS NDK
      run: |
        mkdir -p ohos-ndk
        VERSION="${{ env.OHOS_NDK_VERSION }}"
        
        # 尝试多种可能的 URL 格式
        URL_SCHEMES=(
          "https://repo.huaweicloud.com/harmonyos/sdk/ohos-sdk/$VERSION/ohos-sdk-linux-public-$VERSION.zip"
          "https://repo.huaweicloud.com/harmonyos/sdk/ohos-sdk/ohos-sdk-linux-public-$VERSION.zip"
          "https://repo.huaweicloud.com/harmonyos/sdk/ohos-sdk/$VERSION/ohos-sdk-linux-$VERSION.zip"
          "https://repo.huaweicloud.com/harmonyos/sdk/ohos-sdk/ohos-sdk-linux-$VERSION.zip"
        )
        
        # 尝试下载
        DOWNLOAD_SUCCESS=0
        for url in "${URL_SCHEMES[@]}"; do
          echo "Trying URL: $url"
          if wget -q --spider "$url"; then
            echo "URL exists, downloading..."
            if wget "$url" -O ndk.zip; then
              DOWNLOAD_SUCCESS=1
              echo "Downloaded NDK successfully from $url"
              break
            fi
          fi
          sleep 3
        done
        
        if [ $DOWNLOAD_SUCCESS -ne 1 ]; then
          echo "❌ All download attempts failed for NDK version $VERSION"
          echo "Please check available versions at: https://repo.huaweicloud.com/harmonyos/sdk/ohos-sdk/"
          exit 1
        fi
        
        # 解压并查找 native 目录
        unzip -q ndk.zip -d ohos-ndk
        NATIVE_PATH=$(find ohos-ndk -type d -name "native" | head -n1)
        if [ -z "$NATIVE_PATH" ]; then
          echo "❌ Failed to find native directory in NDK"
          echo "Contents of ohos-ndk:"
          ls -R ohos-ndk
          exit 1
        fi
        
        echo "OHOS_NDK_PATH=$GITHUB_WORKSPACE/$NATIVE_PATH" >> $GITHUB_ENV
        rm -f ndk.zip
        echo "NDK setup complete at $NATIVE_PATH"

    - name: Download Ghostscript source
      run: |
        VERSION="${{ env.GHOSTSCRIPT_VERSION }}"
        GHOSTSCRIPT_URL="https://github.com/ArtifexSoftware/ghostpdl/archive/refs/tags/ghostscript-$VERSION.tar.gz"
        echo "Downloading Ghostscript from: $GHOSTSCRIPT_URL"
        
        # 带重试的下载
        for i in {1..3}; do
          if wget "$GHOSTSCRIPT_URL" -O ghostscript.tar.gz; then
            echo "Downloaded Ghostscript successfully"
            break
          else
            echo "Download attempt $i failed"
            if [ $i -eq 3 ]; then
              echo "❌ Failed to download Ghostscript after 3 attempts"
              exit 1
            fi
            sleep 10
          fi
        done
        
        # 提取必要的文件
        mkdir -p ${{ env.PROJECT_PATH }}/src/main/cpp/ghostscript
        tar -xzf ghostscript.tar.gz \
          --strip-components=3 \
          --directory=${{ env.PROJECT_PATH }}/src/main/cpp/ghostscript \
          ghostpdl-ghostscript-$VERSION/ghostscript/base \
          ghostpdl-ghostscript-$VERSION/ghostscript/psi \
          ghostpdl-ghostscript-$VERSION/ghostscript/main \
          ghostpdl-ghostscript-$VERSION/ghostscript/devices
        
        # 验证提取的文件
        if [ ! -f "${{ env.PROJECT_PATH }}/src/main/cpp/ghostscript/devices/gdevpclm.c" ]; then
          echo "❌ Extracted files are missing. Listing extracted directory:"
          ls -R ${{ env.PROJECT_PATH }}/src/main/cpp/ghostscript
          exit 1
        fi
        
        rm -f ghostscript.tar.gz

    - name: Create CMake project structure
      run: |
        cd ${{ env.PROJECT_PATH }}
        
        # 创建主 CMakeLists.txt
        cat > CMakeLists.txt << 'EOF'
        cmake_minimum_required(VERSION 3.16)
        project(pdf_converter)
        
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__OHOS__ -Wno-deprecated")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D__OHOS__")
        
        add_subdirectory(src/main/cpp/ghostscript)
        
        add_library(pdf_converter SHARED src/main/cpp/pdf_converter.cpp)
        
        target_link_libraries(pdf_converter PUBLIC
            ghostscript
            libace_napi.z.so
            libhilog_ndk.z.so
        )
        
        target_include_directories(pdf_converter PRIVATE
            src/main/cpp/ghostscript
        )
        EOF
        
        # 创建 Ghostscript 的 CMakeLists
        mkdir -p src/main/cpp/ghostscript
        cat > src/main/cpp/ghostscript/CMakeLists.txt << 'EOF'
        file(GLOB_RECURSE GS_SOURCES
            "base/*.c"
            "psi/*.c"
            "main/*.c"
            "devices/gdevpclm.c"
        )
        
        add_library(ghostscript STATIC ${GS_SOURCES})
        
        target_compile_definitions(ghostscript PRIVATE
            __OHOS__=1
            USE_LARGE_FILES=1
            OPAQUE=1
        )
        
        target_include_directories(ghostscript PUBLIC
            ${CMAKE_CURRENT_SOURCE_DIR}
            ${CMAKE_CURRENT_SOURCE_DIR}/base
        )
        EOF
        
        # 创建业务逻辑文件
        mkdir -p src/main/cpp
        cat > src/main/cpp/pdf_converter.cpp << 'EOF'
        #include <napi/native_api.h>
        #include "ghostscript/iapi.h"
        
        static napi_value ConvertPdfToPclm(napi_env env, napi_callback_info info) {
            size_t argc = 2;
            napi_value args[2];
            napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
            
            char pdfPath[256], pclmPath[256];
            size_t pathLen;
            napi_get_value_string_utf8(env, args[0], pdfPath, sizeof(pdfPath), &pathLen);
            napi_get_value_string_utf8(env, args[1], pclmPath, sizeof(pclmPath), &pathLen);
            
            void *instance;
            int code = gsapi_new_instance(&instance, nullptr);
            if (code < 0) return nullptr;
            
            const char *argv[] = {
                "ghostscript",
                "-dNOPAUSE", "-dBATCH", "-dQUIET",
                "-sDEVICE=pclm",
                "-dCompressionStrategy=2",
                "-r300",
                "-sOutputFile=", pclmPath,
                pdfPath,
                nullptr
            };
            int argCount = sizeof(argv)/sizeof(char*) - 1;
            
            code = gsapi_init_with_args(instance, argCount, (char **)argv);
            gsapi_exit(instance);
            gsapi_delete_instance(instance);
            
            return nullptr;
        }
        
        EXTERN_C_START
        static napi_value Init(napi_env env, napi_value exports) {
            napi_property_descriptor desc = {
                "convertPdfToPclm", nullptr, ConvertPdfToPclm
            };
            napi_define_properties(env, exports, 1, &desc);
            return exports;
        }
        EXTERN_C_END
        
        static napi_module pdf_converter_module = {
            .nm_version = 1,
            .nm_register_func = Init,
            .nm_modname = "pdf_converter",
        };
        
        extern "C" __attribute__((constructor)) void RegisterModule() {
            napi_module_register(&pdf_converter_module);
        }
        EOF

    - name: Build with CMake and Ninja
      run: |
        cd ${{ env.PROJECT_PATH }}
        mkdir build && cd build
        
        cmake .. \
          -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.OHOS_NDK_PATH }}/build/cmake/ohos.toolchain.cmake \
          -DOHOS_ARCH=arm64-v8a \
          -DOHOS_STL=c++_shared \
          -DCMAKE_BUILD_TYPE=MinSizeRel
        
        ninja
        
        # 重命名并清理
        mv libpdf_converter.so libpdf_converter.z.so
        find . -name "*.o" -delete
        rm -rf CMakeFiles

    - name: Verify output
      run: |
        cd ${{ env.PROJECT_PATH }}/build
        file libpdf_converter.z.so
        ls -lh libpdf_converter.z.so
        echo "File size: $(du -h libpdf_converter.z.so | cut -f1)"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: harmony-pdf-converter
        path: ${{ env.PROJECT_PATH }}/build/libpdf_converter.z.so
        compression-level: 0
        overwrite: true
