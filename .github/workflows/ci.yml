name: Build PDF→PCLm Libraries

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CLI_URL: "https://contentcenter-vali-drcn.dbankcdn.cn/pvt_2/DeveloperAlliance_package_901_9/f6/v3/s4KXxlxTQBamLt4g2wT0Hg/commandline-tools-linux-x64-5.1.0.840.zip?HW-CC-KV=V1&HW-CC-Date=20250714T071922Z&HW-CC-Expire=7200&HW-CC-Sign=0674BDEFBA94EE12AFF3F869D9A66610850D7E1949BE37E1ABD2AD01AE61AE03"
      GS_VERSION: ${{ secrets.GS_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git unzip p7zip-full \
            autoconf automake libtool \
            cmake python3 pkg-config \
            zlib1g-dev libpng-dev libtiff5-dev \
            file

      - name: Download HMOS CLI
        run: wget -O hmos-cli.zip "${CLI_URL}"

      - name: Extract HMOS CLI
        run: |
          mkdir extracted
          unzip -q hmos-cli.zip -d extracted

      - name: Debug extracted/ tree
        run: find extracted | sed 's/^/→ /'

      - name: Locate HMOS CLI root
        run: |
          native_dir=$(find extracted -type d -name native | head -n1)
          echo "Found native dir: $native_dir"
          if [ -z "$native_dir" ]; then
            echo "ERROR: native/ not found"
            find extracted
            exit 1
          fi
          root=${native_dir%/native}
          mv "$root" hmos-cli

      - name: Debug hmos-cli/ tree
        run: find hmos-cli | sed 's/^/→ /'

      - name: Locate cross tools & set env
        run: |
          # 找到 LLVM 目录下的 clang/clang++
          tool_bin=$(find hmos-cli/native/llvm -type f -executable -name clang | head -n1)
          tool_dir=$(dirname "$tool_bin")
          echo "Toolchain dir: $tool_dir"

          # 把 tool_dir 与 build-tools/bin 加入 PATH（展开当前 $PATH）
          echo "PATH=${tool_dir}:$PWD/hmos-cli/native/build-tools/bin:${PATH}" >> $GITHUB_ENV

          # 设置工具链指令
          echo "CC=clang"   >> $GITHUB_ENV
          echo "CXX=clang++">> $GITHUB_ENV
          echo "AR=llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=llvm-ranlib" >> $GITHUB_ENV

          # 基础交叉编译参数
          echo "SYSROOT=$PWD/hmos-cli/native/sysroot" >> $GITHUB_ENV
          echo "CFLAGS=--sysroot=$SYSROOT -fPIC -O2"    >> $GITHUB_ENV
          echo "CXXFLAGS=--sysroot=$SYSROOT -fPIC -O2"  >> $GITHUB_ENV
          echo "LDFLAGS=--sysroot=$SYSROOT"             >> $GITHUB_ENV

      - name: Debug toolchain
        run: |
          echo "CC   = $CC"
          echo "PATH = $PATH"
          echo 'int main(){}' > test.c
          $CC $CFLAGS test.c $LDFLAGS -o test.bin
          file test.bin

      - name: Build libgs.so (Ghostscript)
        run: |
          git clone https://git.ghostscript.com/ghostpdl.git
          cd ghostpdl
          if [ -n "$GS_VERSION" ]; then
            git fetch --tags
            git checkout "$GS_VERSION"
          fi
          ./autogen.sh
          ./configure \
            --host=aarch64-unknown-linux-gnu \
            --disable-gtk \
            --disable-fontconfig \
            --disable-compile-inits \
            --with-device-list="pclm" \
            CC=$CC CXX=$CXX \
            CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS"
          make -j$(nproc)
          make install DESTDIR=$(pwd)/build_output

      - name: Build pdf2pclm.so (Wrapper)
        run: |
          cd wrapper
          mkdir build && cd build
          cmake .. \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_FIND_ROOT_PATH=$SYSROOT
          make -j$(nproc)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pclm-libs
          path: |
            ghostpdl/build_output/usr/local/ghostscript/lib/libgs.so
            wrapper/build/libpdf2pclm.so
