name: Build PDF→PCLm Libraries

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CLI_URL: "https://contentcenter-vali-drcn.dbankcdn.cn/pvt_2/DeveloperAlliance_package_901_9/f6/v3/s4KXxlxTQBamLt4g2wT0Hg/commandline-tools-linux-x64-5.1.0.840.zip?HW-CC-KV=V1&HW-CC-Date=20250714T071922Z&HW-CC-Expire=7200&HW-CC-Sign=0674BDEFBA94EE12AFF3F869D9A66610850D7E1949BE37E1ABD2AD01AE61AE03"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git autoconf automake libtool \
            cmake python3 pkg-config \
            zlib1g-dev libpng-dev libtiff5-dev \
            libarchive-tools p7zip-full

      - name: Download & extract HMOS CLI
        run: |
          wget -O hmos-cli.tar.gz "${CLI_URL}"
          mkdir extracted

          # 优选 bsdtar，多段 gzip 支持更好
          if bsdtar -tf hmos-cli.tar.gz &>/dev/null; then
            bsdtar -xf hmos-cli.tar.gz -C extracted
          else
            echo "bsdtar 解包失败，使用 7z 兜底"
            7z x hmos-cli.tar.gz -oextracted
          fi

      - name: Debug extracted structure
        run: |
          echo "=== extracted/ 目录树 ==="
          find extracted | sed 's/^/→ /'

      - name: Locate and rename CLI root
        run: |
          # 根据 extracted/ 下的 native 目录动态定位根路径
          native_dir=$(find extracted -type d -name native | head -n1)
          echo "found native at: $native_dir"
          if [ -z "$native_dir" ]; then
            echo "ERROR: 没有找到 native 目录"
            exit 1
          fi
          root=${native_dir%/native}
          mv "$root" hmos-cli

      - name: Show extracted hmos-cli tree
        run: |
          echo "=== hmos-cli/ 目录树 ==="
          find hmos-cli | sed 's/^/→ /'

      - name: Set up cross-compile environment
        run: |
          echo "OHOS_NATIVE=${{ github.workspace }}/hmos-cli/native" >> $GITHUB_ENV
          echo "SYSROOT=${{ github.workspace }}/hmos-cli/native/sysroot" >> $GITHUB_ENV
          echo "PATH=${{ github.workspace }}/hmos-cli/native/llvm/aarch64/bin:${{ github.workspace }}/hmos-cli/native/build-tools/bin:$PATH" >> $GITHUB_ENV
          echo "CC=aarch64-unknown-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=aarch64-unknown-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR=aarch64-unknown-linux-gnu-ar" >> $GITHUB_ENV
          echo "RANLIB=aarch64-unknown-linux-gnu-ranlib" >> $GITHUB_ENV
          echo "CFLAGS=--sysroot=${{ github.workspace }}/hmos-cli/native/sysroot -fPIC -O2" >> $GITHUB_ENV
          echo "LDFLAGS=--sysroot=${{ github.workspace }}/hmos-cli/native/sysroot -shared" >> $GITHUB_ENV

      - name: Verify native directory (print only)
        run: |
          echo "OHOS_NATIVE=$OHOS_NATIVE"
          echo "下面列出 $OHOS_NATIVE 目录内容："
          ls -R "$OHOS_NATIVE" || true

      - name: Build libgs.so (Ghostscript)
        run: |
          git clone https://git.ghostscript.com/ghostpdl.git
          cd ghostpdl
          git checkout 9.55.0
          ./autogen.sh
          ./configure \
            --host=aarch64-unknown-linux-gnu \
            --disable-gtk \
            --disable-fontconfig \
            --disable-compile-inits \
            --with-device-list="pclm" \
            CC=$CC CXX=$CXX CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
          make -j$(nproc)
          make install DESTDIR=$(pwd)/build_output

      - name: Build pdf2pclm.so (Wrapper)
        run: |
          cd wrapper
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$OHOS_NATIVE/build-tools/cmake/toolchain.cmake \
            -DCMAKE_FIND_ROOT_PATH=$SYSROOT
          make -j$(nproc)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pclm-libs
          path: |
            ghostpdl/build_output/usr/local/ghostscript/lib/libgs.so
            wrapper/build/libpdf2pclm.so
