name: Build Ghostscript for OpenHarmony

on:
  workflow_dispatch:
  push:
    paths:
      - 'native/**'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: silkeh/clang:15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # ========== 安装基础工具 ==========
    - name: Install essential tools
      run: |
        apt-get update
        apt-get install -y git cmake ninja-build build-essential \
          autoconf automake libtool pkg-config wget tar gzip
        echo "工具安装完成: $(git --version), $(cmake --version | head -1)"

    # ========== 构建鸿蒙系统组件 ==========
    - name: Build OpenHarmony sysroot
      run: |
        # 创建基础目录结构
        mkdir -p ohos-ndk/sysroot/usr/{include,lib}
        export OHOS_NDK=$PWD/ohos-ndk
        
        # 获取鸿蒙内核头文件
        wget -q https://gitee.com/openharmony/kernel_liteos_a/repository/archive/master.tar.gz -O kernel.tar.gz
        mkdir kernel_src
        tar -xzf kernel.tar.gz -C kernel_src --strip-components=1
        cp -r kernel_src/kernel/include/* $OHOS_NDK/sysroot/usr/include/
        
        # 构建 musl libc
        wget -q https://gitee.com/openharmony/third_party_musl/repository/archive/master.tar.gz -O musl.tar.gz
        mkdir musl_src
        tar -xzf musl.tar.gz -C musl_src --strip-components=1
        cd musl_src
        ./configure \
          --target=aarch64-linux-ohos \
          --prefix=$OHOS_NDK/sysroot/usr \
          --disable-shared \
          --enable-static
        make -j$(nproc) install
        cd ..
        
        # 构建基础库的函数
        build_lib() {
          local lib_name=$1
          local lib_url=$2
          
          echo "Building $lib_name..."
          wget -q $lib_url/repository/archive/master.tar.gz -O $lib_name.tar.gz
          mkdir ${lib_name}_src
          tar -xzf $lib_name.tar.gz -C ${lib_name}_src --strip-components=1
          
          cd ${lib_name}_src
          mkdir build && cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=$OHOS_NDK/sysroot/usr \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_SYSROOT=$OHOS_NDK/sysroot \
            -DCMAKE_C_FLAGS="--target=aarch64-linux-ohos" \
            -DCMAKE_CXX_FLAGS="--target=aarch64-linux-ohos" \
            -DBUILD_SHARED_LIBS=OFF
          cmake --build . --target install -j$(nproc)
          cd ../..
        }
        
        # 构建基础库
        build_lib zlib https://gitee.com/openharmony/third_party_zlib
        build_lib libpng https://gitee.com/openharmony/third_party_libpng
        build_lib freetype https://gitee.com/openharmony/third_party_freetype

        echo "OHOS_NDK_HOME=$OHOS_NDK" >> $GITHUB_ENV
        echo "PATH=$PATH:$OHOS_NDK/llvm/bin" >> $GITHUB_ENV

    # ========== 构建鸿蒙工具链 ==========
    - name: Build OpenHarmony toolchain
      run: |
        export OHOS_NDK=$OHOS_NDK_HOME
        
        # 下载 LLVM 源码
        wget -q https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-15.0.7.tar.gz -O llvm.tar.gz
        mkdir llvm_src
        tar -xzf llvm.tar.gz -C llvm_src --strip-components=1
        
        # 编译 Clang
        cd llvm_src
        mkdir build && cd build
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_TARGETS_TO_BUILD="AArch64" \
          -DLLVM_ENABLE_PROJECTS="clang;lld" \
          -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
          -DLLVM_DEFAULT_TARGET_TRIPLE=aarch64-linux-ohos \
          -DCMAKE_INSTALL_PREFIX=$OHOS_NDK/llvm \
          -DLLVM_BUILD_RUNTIME=OFF \
          ../llvm
        ninja install -j$(nproc)
        cd ../..
        
        # 创建 wrapper 脚本
        cat > $OHOS_NDK/llvm/bin/aarch64-linux-ohos-clang <<'EOF'
        #!/bin/bash
        exec $PWD/ohos-ndk/llvm/bin/clang \
          --target=aarch64-linux-ohos \
          --sysroot=$PWD/ohos-ndk/sysroot \
          -fuse-ld=lld \
          "$@"
        EOF
        chmod +x $OHOS_NDK/llvm/bin/aarch64-linux-ohos-clang*
        ln -s aarch64-linux-ohos-clang $OHOS_NDK/llvm/bin/aarch64-linux-ohos-clang++

    # ========== 构建 Ghostscript ==========
    - name: Build Ghostscript
      run: |
        # 下载 Ghostscript 源码
        wget -q https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs1003/ghostscript-10.03.0.tar.gz
        mkdir gs_src
        tar -xzf ghostscript-10.03.0.tar.gz -C gs_src --strip-components=1
        cd gs_src
        
        # 应用鸿蒙适配补丁
        cat > ohos.patch <<'EOPATCH'
        diff --git a/base/gp_getnv.c b/base/gp_getnv.c
        --- a/base/gp_getnv.c
        +++ b/base/gp_getnv.c
        @@ -22,6 +22,9 @@
         const char *
         gp_getenv(const char *key)
         {
        +    /* OpenHarmony doesn't have environment variables */
        +    return NULL;
        +
         #ifdef __APPLE__
             /* On macOS, when running in a sandbox, the environment is sanitized. */
             if (strcmp(key, "HOME") == 0)
        diff --git a/base/gp_unix.c b/base/gp_unix.c
        --- a/base/gp_unix.c
        +++ b/base/gp_unix.c
        @@ -83,7 +83,7 @@
         FILE *
         gp_fopen(const char *fname, const char *mode)
         {
        -    return fopen(fname, mode);
        +    return ohos_fopen(fname, mode);
         }
        EOPATCH
        
        patch -p1 < ohos.patch
        
        # 添加简化版鸿蒙文件IO实现
        cat > base/ohos_fileio.c <<'EOF'
        #include <stdio.h>
        
        FILE* ohos_fopen(const char* path, const char* mode) {
            // 实际项目中应替换为鸿蒙API
            return fopen(path, mode);
        }
        EOF
        
        ./autogen.sh
        ./configure \
          --host=aarch64-linux-ohos \
          --prefix=/gs-build \
          --enable-shared \
          --disable-cups \
          --with-drivers=PCLm \
          CC="$OHOS_NDK_HOME/llvm/bin/aarch64-linux-ohos-clang" \
          CXX="$OHOS_NDK_HOME/llvm/bin/aarch64-linux-ohos-clang++" \
          CFLAGS="-fPIC -O3 -I$OHOS_NDK_HOME/sysroot/usr/include -DOHOS_CUSTOM_IO" \
          LDFLAGS="-L$OHOS_NDK_HOME/sysroot/usr/lib -lz -lpng -lfreetype"
        
        make -j$(nproc)
        make install

    # ========== 产物打包 ==========
    - name: Package artifacts
      run: |
        mkdir -p artifacts/libs/arm64-v8a
        cp /gs-build/lib/libgs.so artifacts/libs/arm64-v8a/
        
        # 验证文件类型
        file artifacts/libs/arm64-v8a/libgs.so
        echo "构建时间: $(date)" > artifacts/build-info.txt
        echo "文件信息: $(file artifacts/libs/arm64-v8a/libgs.so)" >> artifacts/build-info.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ohos-ghostscript
        path: artifacts
